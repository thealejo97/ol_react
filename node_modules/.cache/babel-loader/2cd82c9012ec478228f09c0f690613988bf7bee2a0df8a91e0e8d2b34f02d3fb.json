{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\usuario\\\\Documents\\\\proyectos\\\\OL_React\\\\ol_react\\\\src\\\\pages\\\\MerchantFormPage\\\\MerchantFormPageContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport MerchantFormPageView from \"./MerchantFormPageView\";\nimport httpService from \"../../services/httpService\"; // Simulando un servicio HTTP\nimport { API_ENDPOINTS } from \"../../services/config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MerchantFormPageContainer = () => {\n  _s();\n  const [merchant, setMerchant] = useState({\n    businessName: \"\",\n    department: \"\",\n    city: \"\",\n    phone: \"\",\n    email: \"\",\n    registrationDate: \"\",\n    hasEstablishments: false\n  });\n  const [establishments, setEstablishments] = useState([]);\n  const [departments, setDepartments] = useState([]);\n  const [cities, setCities] = useState([]);\n  const [totalIncomes, setTotalIncomes] = useState(0);\n  const [totalEmployees, setTotalEmployees] = useState(0);\n  useEffect(() => {\n    const fetchDepartmentsWithCities = async () => {\n      try {\n        const response = await httpService(API_ENDPOINTS.DEPARTMENTS);\n        const departmentsWithCities = response.content.map(department => ({\n          id: department.id,\n          name: department.name,\n          cities: department.cities.map(city => ({\n            id: city.id,\n            name: city.name\n          }))\n        }));\n        setDepartments(departmentsWithCities);\n      } catch (err) {\n        console.error(\"Error fetching departments and cities:\", err);\n      }\n    };\n    fetchDepartmentsWithCities();\n  }, []);\n\n  // Fetch cities when department changes\n  useEffect(() => {\n    if (merchant.department) {\n      const fetchCities = async () => {\n        try {\n          const response = await httpService(`${API_ENDPOINTS.CITIES}?department=${merchant.department}`);\n          setCities(response);\n        } catch (err) {\n          console.error(\"Error fetching cities\", err);\n        }\n      };\n      fetchCities();\n    }\n  }, [merchant.department]);\n\n  // Calculate totals when establishments change\n  useEffect(() => {\n    const totalIncomes = establishments.reduce((acc, est) => acc + parseFloat(est.incomes || 0), 0);\n    const totalEmployees = establishments.reduce((acc, est) => acc + parseInt(est.employees || 0, 10), 0);\n    setTotalIncomes(totalIncomes);\n    setTotalEmployees(totalEmployees);\n  }, [establishments]);\n  const handleInputChange = e => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = e.target;\n    setMerchant({\n      ...merchant,\n      [name]: type === \"checkbox\" ? checked : value\n    });\n  };\n  const handleAddEstablishment = () => {\n    setEstablishments([...establishments, {\n      name: \"\",\n      incomes: 0,\n      employees: 0\n    }]);\n  };\n  const handleEstablishmentChange = (index, field, value) => {\n    const updatedEstablishments = [...establishments];\n    updatedEstablishments[index][field] = value;\n    setEstablishments(updatedEstablishments);\n  };\n  const handleRemoveEstablishment = index => {\n    const updatedEstablishments = establishments.filter((_, i) => i !== index);\n    setEstablishments(updatedEstablishments);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Crear el payload que coincida con la estructura esperada por el API\n    const payload = {\n      businessName: merchant.businessName,\n      cityId: parseInt(merchant.city, 10),\n      // Asegurarte de que sea un número\n      departmentId: parseInt(merchant.department, 10),\n      // Asegurarte de que sea un número\n      phone: merchant.phone,\n      email: merchant.email,\n      status: \"Active\",\n      // Puedes cambiar esto si el estado es dinámico\n      createdBy: \"admin\" // Puedes reemplazarlo por el usuario actual si está disponible\n    };\n    try {\n      // Realiza la solicitud POST al endpoint MERCHANTS\n      const response = await httpService(API_ENDPOINTS.MERCHANTS, \"POST\", payload);\n      alert(\"Formulario enviado correctamente\");\n      console.log(\"Respuesta del servidor:\", response);\n\n      // Limpia el formulario después de enviarlo\n      setMerchant({\n        businessName: \"\",\n        department: \"\",\n        city: \"\",\n        phone: \"\",\n        email: \"\",\n        registrationDate: \"\",\n        hasEstablishments: false\n      });\n      setEstablishments([]);\n    } catch (err) {\n      alert(\"Error enviando el formulario\");\n      console.error(\"Error en la solicitud:\", err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(MerchantFormPageView, {\n    merchant: merchant,\n    departments: departments,\n    cities: cities,\n    establishments: establishments,\n    totalIncomes: totalIncomes,\n    totalEmployees: totalEmployees,\n    onInputChange: handleInputChange,\n    onAddEstablishment: handleAddEstablishment,\n    onEstablishmentChange: handleEstablishmentChange,\n    onRemoveEstablishment: handleRemoveEstablishment,\n    onSubmit: handleSubmit\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n};\n_s(MerchantFormPageContainer, \"PttzSEC67pEPnt3gGjf7ef3sFJE=\");\n_c = MerchantFormPageContainer;\nexport default MerchantFormPageContainer;\nvar _c;\n$RefreshReg$(_c, \"MerchantFormPageContainer\");","map":{"version":3,"names":["React","useState","useEffect","MerchantFormPageView","httpService","API_ENDPOINTS","jsxDEV","_jsxDEV","MerchantFormPageContainer","_s","merchant","setMerchant","businessName","department","city","phone","email","registrationDate","hasEstablishments","establishments","setEstablishments","departments","setDepartments","cities","setCities","totalIncomes","setTotalIncomes","totalEmployees","setTotalEmployees","fetchDepartmentsWithCities","response","DEPARTMENTS","departmentsWithCities","content","map","id","name","err","console","error","fetchCities","CITIES","reduce","acc","est","parseFloat","incomes","parseInt","employees","handleInputChange","e","value","type","checked","target","handleAddEstablishment","handleEstablishmentChange","index","field","updatedEstablishments","handleRemoveEstablishment","filter","_","i","handleSubmit","preventDefault","payload","cityId","departmentId","status","createdBy","MERCHANTS","alert","log","onInputChange","onAddEstablishment","onEstablishmentChange","onRemoveEstablishment","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/usuario/Documents/proyectos/OL_React/ol_react/src/pages/MerchantFormPage/MerchantFormPageContainer.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport MerchantFormPageView from \"./MerchantFormPageView\";\r\nimport httpService from \"../../services/httpService\"; // Simulando un servicio HTTP\r\nimport { API_ENDPOINTS } from \"../../services/config\";\r\n\r\nconst MerchantFormPageContainer = () => {\r\n  const [merchant, setMerchant] = useState({\r\n    businessName: \"\",\r\n    department: \"\",\r\n    city: \"\",\r\n    phone: \"\",\r\n    email: \"\",\r\n    registrationDate: \"\",\r\n    hasEstablishments: false,\r\n  });\r\n\r\n  const [establishments, setEstablishments] = useState([]);\r\n  const [departments, setDepartments] = useState([]);\r\n  const [cities, setCities] = useState([]);\r\n  const [totalIncomes, setTotalIncomes] = useState(0);\r\n  const [totalEmployees, setTotalEmployees] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const fetchDepartmentsWithCities = async () => {\r\n      try {\r\n        const response = await httpService(API_ENDPOINTS.DEPARTMENTS);\r\n        const departmentsWithCities = response.content.map((department) => ({\r\n          id: department.id,\r\n          name: department.name,\r\n          cities: department.cities.map((city) => ({\r\n            id: city.id,\r\n            name: city.name,\r\n          })),\r\n        }));\r\n        setDepartments(departmentsWithCities);\r\n      } catch (err) {\r\n        console.error(\"Error fetching departments and cities:\", err);\r\n      }\r\n    };\r\n\r\n    fetchDepartmentsWithCities();\r\n  }, []);\r\n\r\n\r\n  // Fetch cities when department changes\r\n  useEffect(() => {\r\n    if (merchant.department) {\r\n      const fetchCities = async () => {\r\n        try {\r\n          const response = await httpService(\r\n            `${API_ENDPOINTS.CITIES}?department=${merchant.department}`\r\n          );\r\n          setCities(response);\r\n        } catch (err) {\r\n          console.error(\"Error fetching cities\", err);\r\n        }\r\n      };\r\n      fetchCities();\r\n    }\r\n  }, [merchant.department]);\r\n\r\n  // Calculate totals when establishments change\r\n  useEffect(() => {\r\n    const totalIncomes = establishments.reduce(\r\n      (acc, est) => acc + parseFloat(est.incomes || 0),\r\n      0\r\n    );\r\n    const totalEmployees = establishments.reduce(\r\n      (acc, est) => acc + parseInt(est.employees || 0, 10),\r\n      0\r\n    );\r\n    setTotalIncomes(totalIncomes);\r\n    setTotalEmployees(totalEmployees);\r\n  }, [establishments]);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value, type, checked } = e.target;\r\n    setMerchant({\r\n      ...merchant,\r\n      [name]: type === \"checkbox\" ? checked : value,\r\n    });\r\n  };\r\n\r\n  const handleAddEstablishment = () => {\r\n    setEstablishments([\r\n      ...establishments,\r\n      { name: \"\", incomes: 0, employees: 0 },\r\n    ]);\r\n  };\r\n\r\n  const handleEstablishmentChange = (index, field, value) => {\r\n    const updatedEstablishments = [...establishments];\r\n    updatedEstablishments[index][field] = value;\r\n    setEstablishments(updatedEstablishments);\r\n  };\r\n\r\n  const handleRemoveEstablishment = (index) => {\r\n    const updatedEstablishments = establishments.filter((_, i) => i !== index);\r\n    setEstablishments(updatedEstablishments);\r\n  };\r\n\r\nconst handleSubmit = async (e) => {\r\n  e.preventDefault();\r\n\r\n  // Crear el payload que coincida con la estructura esperada por el API\r\n  const payload = {\r\n    businessName: merchant.businessName,\r\n    cityId: parseInt(merchant.city, 10), // Asegurarte de que sea un número\r\n    departmentId: parseInt(merchant.department, 10), // Asegurarte de que sea un número\r\n    phone: merchant.phone,\r\n    email: merchant.email,\r\n    status: \"Active\", // Puedes cambiar esto si el estado es dinámico\r\n    createdBy: \"admin\", // Puedes reemplazarlo por el usuario actual si está disponible\r\n  };\r\n\r\n  try {\r\n    // Realiza la solicitud POST al endpoint MERCHANTS\r\n    const response = await httpService(API_ENDPOINTS.MERCHANTS, \"POST\", payload);\r\n    alert(\"Formulario enviado correctamente\");\r\n    console.log(\"Respuesta del servidor:\", response);\r\n\r\n    // Limpia el formulario después de enviarlo\r\n    setMerchant({\r\n      businessName: \"\",\r\n      department: \"\",\r\n      city: \"\",\r\n      phone: \"\",\r\n      email: \"\",\r\n      registrationDate: \"\",\r\n      hasEstablishments: false,\r\n    });\r\n    setEstablishments([]);\r\n  } catch (err) {\r\n    alert(\"Error enviando el formulario\");\r\n    console.error(\"Error en la solicitud:\", err);\r\n  }\r\n};\r\n\r\n\r\n  return (\r\n    <MerchantFormPageView\r\n      merchant={merchant}\r\n      departments={departments}\r\n      cities={cities}\r\n      establishments={establishments}\r\n      totalIncomes={totalIncomes}\r\n      totalEmployees={totalEmployees}\r\n      onInputChange={handleInputChange}\r\n      onAddEstablishment={handleAddEstablishment}\r\n      onEstablishmentChange={handleEstablishmentChange}\r\n      onRemoveEstablishment={handleRemoveEstablishment}\r\n      onSubmit={handleSubmit}\r\n    />\r\n  );\r\n};\r\n\r\nexport default MerchantFormPageContainer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}