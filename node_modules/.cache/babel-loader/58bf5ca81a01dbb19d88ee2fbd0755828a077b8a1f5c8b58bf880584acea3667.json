{"ast":null,"code":"const httpService = async (url, method = \"GET\", body = null, headers = {}, responseType = \"json\") => {\n  const jwtToken = localStorage.getItem(\"jwtToken\");\n  const defaultHeaders = {\n    \"Content-Type\": \"application/json\",\n    ...(jwtToken && {\n      Authorization: `Bearer ${jwtToken}`\n    })\n  };\n  try {\n    const response = await fetch(`${url}`, {\n      method,\n      headers: {\n        ...defaultHeaders,\n        ...headers\n      },\n      body: body ? JSON.stringify(body) : null\n    });\n    if (!response.ok) {\n      // Maneja el caso de error\n      if (responseType === \"json\") {\n        const error = await response.json();\n        throw new Error(error.message || \"Error en la petición\");\n      }\n      throw new Error(\"Error en la petición\");\n    }\n\n    // Maneja diferentes tipos de respuesta\n    if (responseType === \"blob\") {\n      return await response.blob();\n    } else if (responseType === \"text\") {\n      return await response.text();\n    } else {\n      return await response.json();\n    }\n  } catch (error) {\n    console.error(\"Error en la petición HTTP:\", error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["httpService","url","method","body","headers","responseType","jwtToken","localStorage","getItem","defaultHeaders","Authorization","response","fetch","JSON","stringify","ok","error","json","Error","message","blob","text","console"],"sources":["C:/Users/usuario/Documents/proyectos/OL_React/ol_react/src/services/httpService.js"],"sourcesContent":["const httpService = async (url, method = \"GET\", body = null, headers = {}, responseType = \"json\") => {\r\n  const jwtToken = localStorage.getItem(\"jwtToken\");\r\n\r\n  const defaultHeaders = {\r\n    \"Content-Type\": \"application/json\",\r\n    ...(jwtToken && { Authorization: `Bearer ${jwtToken}` }),\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(`${url}`, {\r\n      method,\r\n      headers: { ...defaultHeaders, ...headers },\r\n      body: body ? JSON.stringify(body) : null,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      // Maneja el caso de error\r\n      if (responseType === \"json\") {\r\n        const error = await response.json();\r\n        throw new Error(error.message || \"Error en la petición\");\r\n      }\r\n      throw new Error(\"Error en la petición\");\r\n    }\r\n\r\n    // Maneja diferentes tipos de respuesta\r\n    if (responseType === \"blob\") {\r\n      return await response.blob();\r\n    } else if (responseType === \"text\") {\r\n      return await response.text();\r\n    } else {\r\n      return await response.json();\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error en la petición HTTP:\", error.message);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAMA,WAAW,GAAG,MAAAA,CAAOC,GAAG,EAAEC,MAAM,GAAG,KAAK,EAAEC,IAAI,GAAG,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAEC,YAAY,GAAG,MAAM,KAAK;EACnG,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EAEjD,MAAMC,cAAc,GAAG;IACrB,cAAc,EAAE,kBAAkB;IAClC,IAAIH,QAAQ,IAAI;MAAEI,aAAa,EAAE,UAAUJ,QAAQ;IAAG,CAAC;EACzD,CAAC;EAED,IAAI;IACF,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGX,GAAG,EAAE,EAAE;MACrCC,MAAM;MACNE,OAAO,EAAE;QAAE,GAAGK,cAAc;QAAE,GAAGL;MAAQ,CAAC;MAC1CD,IAAI,EAAEA,IAAI,GAAGU,IAAI,CAACC,SAAS,CAACX,IAAI,CAAC,GAAG;IACtC,CAAC,CAAC;IAEF,IAAI,CAACQ,QAAQ,CAACI,EAAE,EAAE;MAChB;MACA,IAAIV,YAAY,KAAK,MAAM,EAAE;QAC3B,MAAMW,KAAK,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACG,OAAO,IAAI,sBAAsB,CAAC;MAC1D;MACA,MAAM,IAAID,KAAK,CAAC,sBAAsB,CAAC;IACzC;;IAEA;IACA,IAAIb,YAAY,KAAK,MAAM,EAAE;MAC3B,OAAO,MAAMM,QAAQ,CAACS,IAAI,CAAC,CAAC;IAC9B,CAAC,MAAM,IAAIf,YAAY,KAAK,MAAM,EAAE;MAClC,OAAO,MAAMM,QAAQ,CAACU,IAAI,CAAC,CAAC;IAC9B,CAAC,MAAM;MACL,OAAO,MAAMV,QAAQ,CAACM,IAAI,CAAC,CAAC;IAC9B;EACF,CAAC,CAAC,OAAOD,KAAK,EAAE;IACdM,OAAO,CAACN,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAACG,OAAO,CAAC;IAC1D,MAAMH,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}